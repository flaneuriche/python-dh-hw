
{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Задание 1.\n",
    "Необходимо выделить все биграммы в этом тексте и сохранить их список в какую-либо переменную. Биграммы -- это пары стоящих рядом слов, например, \"варкалось хливкие\", \"хливкие шорьки\" и т.д.\n",
    "\n",
    "Подсказка №1: текст нужно разбить на слова с помощью функции split(), а потом использовать цикл for для создания списка биграмм. На каждой итерации цикла нужно печатать биграмму, а потом добавлять ее в список.\n",
    "\n",
    "Подсказка №2: количество биграмм в тексте = количество слов в тексте - 1."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['варкалось', 'хливкие', 'шорьки', 'пырялись', 'по', 'наве', 'и', 'хрюкотали', 'зелюки', 'как', 'мюмзики', 'в', 'мове', 'о', 'бойся', 'бармаглота', 'сын', 'он', 'так', 'свирлеп', 'и', 'дик', 'а', 'в', 'глуще', 'рымит', 'исполин', 'злопастный', 'брандашмыг']\n",
      "[['варкалось', 'хливкие'], ['хливкие', 'шорьки'], ['шорьки', 'пырялись'], ['пырялись', 'по'], ['по', 'наве'], ['наве', 'и'], ['и', 'хрюкотали'], ['хрюкотали', 'зелюки'], ['зелюки', 'как'], ['как', 'мюмзики'], ['мюмзики', 'в'], ['в', 'мове'], ['мове', 'о'], ['о', 'бойся'], ['бойся', 'бармаглота'], ['бармаглота', 'сын'], ['сын', 'он'], ['он', 'так'], ['так', 'свирлеп'], ['свирлеп', 'и'], ['и', 'дик'], ['дик', 'а'], ['а', 'в'], ['в', 'глуще'], ['глуще', 'рымит'], ['рымит', 'исполин'], ['исполин', 'злопастный'], ['злопастный', 'брандашмыг']]\n"
     ]
    }
   ],
   "source": [
    "#создаем переменную\n",
    "spisok = \"варкалось хливкие шорьки пырялись по наве и хрюкотали зелюки как мюмзики в мове о бойся бармаглота сын он так свирлеп и дик а в глуще рымит исполин злопастный брандашмыг\"\n",
    "#разбиваем на слова\n",
    "word = spisok.split ()\n",
    "print (word)\n",
    "#создаем цикл for для создания списка биграмм\n",
    "bigramsspisok = []\n",
    "for i in range (len(word)-1):\n",
    "    bigramsspisok.append ([word[i], word [i+1]])\n",
    "    \n",
    "print (bigramsspisok)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#Задание 3.\n",
    "1.Скопировать текст, сохранить его в переменную.\n",
    "2.Узнать длину текста в символах.\n",
    "3.Очистить текст от пунктуации, используя list compehensions. На выходе должен получиться список слов.\n",
    "4.Объединить слова из получившегося списка в строку через пробел.\n",
    "5.С помощью list comprehensions проверить, написано ли слово с большой буквы, и если да, то привести его к нижнему регистру. На выходе должен получиться список из всех слов стихотворения, написанных с маленькой буквы (не только те, которые изначально были с маленькой буквы, а все).\n",
    "6.Узнать длину текста в словах.\n",
    "7.Узнать количество уникальных слов.\n",
    "8.Распечатать последние 10 слов.\n",
    "9.Соединить полученный в пункте 3 список в строку. Слова в строке должны быть написаны через знак переноса строки.\n",
    "10.Распечатать с 20 по 30 символ этой строки (включительно).\n",
    "11.Разбить текст на биграммы, записать их в переменную и посчитать частотность каждой биграммы. Биграммы должны быть в виде списка кортежей.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "270\n",
      "['Несчастная', 'кошка', 'порезала', 'лапу', 'Сидит', 'и', 'ни', 'шагу', 'не', 'может', 'ступить', 'Скорей', 'чтобы', 'вылечить', 'кошкину', 'лапу', 'Воздушные', 'шарики', 'надо', 'купить', 'И', 'сразу', 'столпился', 'народ', 'на', 'дороге', 'Шумит', 'и', 'кричит', 'и', 'на', 'кошку', 'глядит', 'А', 'кошка', 'отчасти', 'идет', 'по', 'дороге', 'Отчасти', 'по', 'воздуху', 'плавно', 'летит']\n",
      "Несчастная кошка порезала лапу Сидит и ни шагу не может ступить Скорей чтобы вылечить кошкину лапу Воздушные шарики надо купить И сразу столпился народ на дороге Шумит и кричит и на кошку глядит А кошка отчасти идет по дороге Отчасти по воздуху плавно летит\n",
      "['Несчастная', 'Сидит', 'Скорей', 'Воздушные', 'И', 'Шумит', 'А', 'Отчасти']\n",
      "несчастная кошка порезала лапу сидит и ни шагу не может ступить скорей чтобы вылечить кошкину лапу воздушные шарики надо купить и сразу столпился народ на дороге шумит и кричит и на кошку глядит а кошка отчасти идет по дороге отчасти по воздуху плавно летит\n",
      "44\n",
      "35\n",
      "ит и ни шагу не может ступить скорей чтобы вылечить кошкину лапу воздушные шарики надо купить и сразу столпился народ на дороге шумит и кричит и на кошку глядит а кошка отчасти идет по дороге отчасти по воздуху плавно летит\n",
      "резала\n",
      "лапу\n",
      "\n",
      "(['Несчастная', 'кошка'], ['кошка', 'порезала'], ['порезала', 'лапу'], ['лапу', 'Сидит'], ['Сидит', 'и'], ['и', 'ни'], ['ни', 'шагу'], ['шагу', 'не'], ['не', 'может'], ['может', 'ступить'], ['ступить', 'Скорей'], ['Скорей', 'чтобы'], ['чтобы', 'вылечить'], ['вылечить', 'кошкину'], ['кошкину', 'лапу'], ['лапу', 'Воздушные'], ['Воздушные', 'шарики'], ['шарики', 'надо'], ['надо', 'купить'], ['купить', 'И'], ['И', 'сразу'], ['сразу', 'столпился'], ['столпился', 'народ'], ['народ', 'на'], ['на', 'дороге'], ['дороге', 'Шумит'], ['Шумит', 'и'], ['и', 'кричит'], ['кричит', 'и'], ['и', 'на'], ['на', 'кошку'], ['кошку', 'глядит'], ['глядит', 'А'], ['А', 'кошка'], ['кошка', 'отчасти'], ['отчасти', 'идет'], ['идет', 'по'], ['по', 'дороге'], ['дороге', 'Отчасти'], ['Отчасти', 'по'], ['по', 'воздуху'], ['воздуху', 'плавно'], ['плавно', 'летит'])\n",
      "43\n"
     ]
    }
   ],
   "source": [
    "#Создаем переменную\n",
    "crazycat = \"\"\"Несчастная кошка порезала лапу- \n",
    "Сидит, и ни шагу не может ступить.\n",
    "Скорей, чтобы вылечить кошкину лапу\n",
    "Воздушные шарики надо купить!\n",
    "\n",
    "И сразу столпился народ на дороге-\n",
    "Шумит, и кричит, и на кошку глядит.\n",
    "А кошка отчасти идет по дороге,\n",
    "Отчасти по воздуху плавно летит!\"\"\"\n",
    "#Узнаем количество символов\n",
    "print (len(crazycat))\n",
    "#Очищаем текст от пунктуации, используя list compehensions.\n",
    "crazywords = [word.strip(\".,!?-\") for word in crazycat.split()]    \n",
    "print (crazywords)\n",
    "#Объединяем слова в строку\n",
    "crazyword2 = ' '.join(crazywords)\n",
    "print(crazyword2)\n",
    "#проверяем, написаны ли словы с большой буквы\n",
    "print([w for w in crazyword2.split() if w.istitle()])\n",
    "#Приводим слова к нижнему регистру\n",
    "print(crazyword2.lower())\n",
    "#Узнаем длину текста в словах\n",
    "words = crazyword2.split()\n",
    "print(len(words))\n",
    "#Узнаем количество уникальных слов (чтобы узнать количество уникальных слов, преобразуем в множество и затем посчитаем кол-во)\n",
    "words = \"несчастная кошка порезала лапу сидит и ни шагу не может ступить скорей чтобы вылечить кошкину лапу воздушные шарики надо купить и сразу столпился народ на дороге шумит и кричит и на кошку глядит а кошка отчасти идет по дороге отчасти по воздуху плавно летит\"\n",
    "words2 = set(words.split()) \n",
    "print (len(words2))\n",
    "#Печатаем последние 10 слов\n",
    "print(words[34:])\n",
    "#Соединяем полученный в пункте 3 список в строку через знак переноса строки. \n",
    "crazystr = '\\n'.join(crazywords)\n",
    "#Распечатываем с 20 по 30 символ этой строки (включительно).\n",
    "print (crazystr[19:31])\n",
    "#Разбиваем список на биграммы\n",
    "word = crazystr.split ()\n",
    "crazybigrams = []\n",
    "for i in range (len(word)-1):\n",
    "    crazybigrams.append ([word[i], word [i+1]])\n",
    "#Превращаем список в кортеж\n",
    "crazybigrams = tuple(crazybigrams)\n",
    "print (crazybigrams)\n",
    "#Считаем частотность каждой биграммы\n",
    "print(len(crazybigrams))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Задание 2\n",
    "1.Распечатать текущую директорию и список всех файлов и папок в ней. Посчитать и распечатать количество файлов.\n",
    "2.Пройтись циклом по рабочей директории, читая содержимое каждого файла и записывая его в новый файл poems.txt По завершении цикла должен получиться файл со всеми стихотворениями!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Asus_PC\\python-dh-hw\n",
      ".git\n",
      ".ipynb_checkpoints\n",
      "hello.docx\n",
      "HW2.ipynb\n",
      "poems\n",
      "poems.txt\n",
      "README.md\n",
      "9\n",
      "['боль.txt', 'ворон.txt', 'деды.txt', 'кладь.txt', 'ночь.txt', 'шредингер.txt']\n",
      "['кот.txt', 'лео.txt', 'пушок.txt']\n",
      "['гримм.txt', 'королевич.txt', 'король.txt', 'крестная.txt', 'яга.txt']\n",
      "\n",
      "{\n",
      " \"cells\": [\n",
      "  {\n",
      "   \"cell_type\": \"markdown\",\n",
      "   \"metadata\": {},\n",
      "   \"source\": [\n",
      "    \"Задание 1.\\n\",\n",
      "    \"Необходимо выделить все биграммы в этом тексте и сохранить их список в какую-либо переменную. Биграммы -- это пары стоящих рядом слов, например, \\\"варкалось хливкие\\\", \\\"хливкие шорьки\\\" и т.д.\\n\",\n",
      "    \"\\n\",\n",
      "    \"Подсказка №1: текст нужно разбить на слова с помощью функции split(), а потом использовать цикл for для создания списка биграмм. На каждой итерации цикла нужно печатать биграмму, а потом добавлять ее в список.\\n\",\n",
      "    \"\\n\",\n",
      "    \"Подсказка №2: количество биграмм в тексте = количество слов в тексте - 1.\"\n",
      "   ]\n",
      "  },\n",
      "  {\n",
      "   \"cell_type\": \"code\",\n",
      "   \"execution_count\": 1,\n",
      "   \"metadata\": {},\n",
      "   \"outputs\": [\n",
      "    {\n",
      "     \"name\": \"stdout\",\n",
      "     \"output_type\": \"stream\",\n",
      "     \"text\": [\n",
      "      \"['варкалось', 'хливкие', 'шорьки', 'пырялись', 'по', 'наве', 'и', 'хрюкотали', 'зелюки', 'как', 'мюмзики', 'в', 'мове', 'о', 'бойся', 'бармаглота', 'сын', 'он', 'так', 'свирлеп', 'и', 'дик', 'а', 'в', 'глуще', 'рымит', 'исполин', 'злопастный', 'брандашмыг']\\n\",\n",
      "      \"[['варкалось', 'хливкие'], ['хливкие', 'шорьки'], ['шорьки', 'пырялись'], ['пырялись', 'по'], ['по', 'наве'], ['наве', 'и'], ['и', 'хрюкотали'], ['хрюкотали', 'зелюки'], ['зелюки', 'как'], ['как', 'мюмзики'], ['мюмзики', 'в'], ['в', 'мове'], ['мове', 'о'], ['о', 'бойся'], ['бойся', 'бармаглота'], ['бармаглота', 'сын'], ['сын', 'он'], ['он', 'так'], ['так', 'свирлеп'], ['свирлеп', 'и'], ['и', 'дик'], ['дик', 'а'], ['а', 'в'], ['в', 'глуще'], ['глуще', 'рымит'], ['рымит', 'исполин'], ['исполин', 'злопастный'], ['злопастный', 'брандашмыг']]\\n\"\n",
      "     ]\n",
      "    }\n",
      "   ],\n",
      "   \"source\": [\n",
      "    \"#создаем переменную\\n\",\n",
      "    \"spisok = \\\"варкалось хливкие шорьки пырялись по наве и хрюкотали зелюки как мюмзики в мове о бойся бармаглота сын он так свирлеп и дик а в глуще рымит исполин злопастный брандашмыг\\\"\\n\",\n",
      "    \"#разбиваем на слова\\n\",\n",
      "    \"word = spisok.split ()\\n\",\n",
      "    \"print (word)\\n\",\n",
      "    \"#создаем цикл for для создания списка биграмм\\n\",\n",
      "    \"bigramsspisok = []\\n\",\n",
      "    \"for i in range (len(word)-1):\\n\",\n",
      "    \"    bigramsspisok.append ([word[i], word [i+1]])\\n\",\n",
      "    \"    \\n\",\n",
      "    \"print (bigramsspisok)\\n\"\n",
      "   ]\n",
      "  },\n",
      "  {\n",
      "   \"cell_type\": \"markdown\",\n",
      "   \"metadata\": {},\n",
      "   \"source\": [\n",
      "    \"#Задание 3.\\n\",\n",
      "    \"1.Скопировать текст, сохранить его в переменную.\\n\",\n",
      "    \"2.Узнать длину текста в символах.\\n\",\n",
      "    \"3.Очистить текст от пунктуации, используя list compehensions. На выходе должен получиться список слов.\\n\",\n",
      "    \"4.Объединить слова из получившегося списка в строку через пробел.\\n\",\n",
      "    \"5.С помощью list comprehensions проверить, написано ли слово с большой буквы, и если да, то привести его к нижнему регистру. На выходе должен получиться список из всех слов стихотворения, написанных с маленькой буквы (не только те, которые изначально были с маленькой буквы, а все).\\n\",\n",
      "    \"6.Узнать длину текста в словах.\\n\",\n",
      "    \"7.Узнать количество уникальных слов.\\n\",\n",
      "    \"8.Распечатать последние 10 слов.\\n\",\n",
      "    \"9.Соединить полученный в пункте 3 список в строку. Слова в строке должны быть написаны через знак переноса строки.\\n\",\n",
      "    \"10.Распечатать с 20 по 30 символ этой строки (включительно).\\n\",\n",
      "    \"11.Разбить текст на биграммы, записать их в переменную и посчитать частотность каждой биграммы. Биграммы должны быть в виде списка кортежей.\\n\"\n",
      "   ]\n",
      "  },\n",
      "  {\n",
      "   \"cell_type\": \"code\",\n",
      "   \"execution_count\": 10,\n",
      "   \"metadata\": {},\n",
      "   \"outputs\": [\n",
      "    {\n",
      "     \"name\": \"stdout\",\n",
      "     \"output_type\": \"stream\",\n",
      "     \"text\": [\n",
      "      \"270\\n\",\n",
      "      \"['Несчастная', 'кошка', 'порезала', 'лапу', 'Сидит', 'и', 'ни', 'шагу', 'не', 'может', 'ступить', 'Скорей', 'чтобы', 'вылечить', 'кошкину', 'лапу', 'Воздушные', 'шарики', 'надо', 'купить', 'И', 'сразу', 'столпился', 'народ', 'на', 'дороге', 'Шумит', 'и', 'кричит', 'и', 'на', 'кошку', 'глядит', 'А', 'кошка', 'отчасти', 'идет', 'по', 'дороге', 'Отчасти', 'по', 'воздуху', 'плавно', 'летит']\\n\",\n",
      "      \"Несчастная кошка порезала лапу Сидит и ни шагу не может ступить Скорей чтобы вылечить кошкину лапу Воздушные шарики надо купить И сразу столпился народ на дороге Шумит и кричит и на кошку глядит А кошка отчасти идет по дороге Отчасти по воздуху плавно летит\\n\",\n",
      "      \"['Несчастная', 'Сидит', 'Скорей', 'Воздушные', 'И', 'Шумит', 'А', 'Отчасти']\\n\",\n",
      "      \"несчастная кошка порезала лапу сидит и ни шагу не может ступить скорей чтобы вылечить кошкину лапу воздушные шарики надо купить и сразу столпился народ на дороге шумит и кричит и на кошку глядит а кошка отчасти идет по дороге отчасти по воздуху плавно летит\\n\",\n",
      "      \"44\\n\",\n",
      "      \"35\\n\",\n",
      "      \"ит и ни шагу не может ступить скорей чтобы вылечить кошкину лапу воздушные шарики надо купить и сразу столпился народ на дороге шумит и кричит и на кошку глядит а кошка отчасти идет по дороге отчасти по воздуху плавно летит\\n\",\n",
      "      \"резала\\n\",\n",
      "      \"лапу\\n\",\n",
      "      \"\\n\",\n",
      "      \"(['Несчастная', 'кошка'], ['кошка', 'порезала'], ['порезала', 'лапу'], ['лапу', 'Сидит'], ['Сидит', 'и'], ['и', 'ни'], ['ни', 'шагу'], ['шагу', 'не'], ['не', 'может'], ['может', 'ступить'], ['ступить', 'Скорей'], ['Скорей', 'чтобы'], ['чтобы', 'вылечить'], ['вылечить', 'кошкину'], ['кошкину', 'лапу'], ['лапу', 'Воздушные'], ['Воздушные', 'шарики'], ['шарики', 'надо'], ['надо', 'купить'], ['купить', 'И'], ['И', 'сразу'], ['сразу', 'столпился'], ['столпился', 'народ'], ['народ', 'на'], ['на', 'дороге'], ['дороге', 'Шумит'], ['Шумит', 'и'], ['и', 'кричит'], ['кричит', 'и'], ['и', 'на'], ['на', 'кошку'], ['кошку', 'глядит'], ['глядит', 'А'], ['А', 'кошка'], ['кошка', 'отчасти'], ['отчасти', 'идет'], ['идет', 'по'], ['по', 'дороге'], ['дороге', 'Отчасти'], ['Отчасти', 'по'], ['по', 'воздуху'], ['воздуху', 'плавно'], ['плавно', 'летит'])\\n\",\n",
      "      \"43\\n\"\n",
      "     ]\n",
      "    }\n",
      "   ],\n",
      "   \"source\": [\n",
      "    \"#Создаем переменную\\n\",\n",
      "    \"crazycat = \\\"\\\"\\\"Несчастная кошка порезала лапу- \\n\",\n",
      "    \"Сидит, и ни шагу не может ступить.\\n\",\n",
      "    \"Скорей, чтобы вылечить кошкину лапу\\n\",\n",
      "    \"Воздушные шарики надо купить!\\n\",\n",
      "    \"\\n\",\n",
      "    \"И сразу столпился народ на дороге-\\n\",\n",
      "    \"Шумит, и кричит, и на кошку глядит.\\n\",\n",
      "    \"А кошка отчасти идет по дороге,\\n\",\n",
      "    \"Отчасти по воздуху плавно летит!\\\"\\\"\\\"\\n\",\n",
      "    \"#Узнаем количество символов\\n\",\n",
      "    \"print (len(crazycat))\\n\",\n",
      "    \"#Очищаем текст от пунктуации, используя list compehensions.\\n\",\n",
      "    \"crazywords = [word.strip(\\\".,!?-\\\") for word in crazycat.split()]    \\n\",\n",
      "    \"print (crazywords)\\n\",\n",
      "    \"#Объединяем слова в строку\\n\",\n",
      "    \"crazyword2 = ' '.join(crazywords)\\n\",\n",
      "    \"print(crazyword2)\\n\",\n",
      "    \"#проверяем, написаны ли словы с большой буквы\\n\",\n",
      "    \"print([w for w in crazyword2.split() if w.istitle()])\\n\",\n",
      "    \"#Приводим слова к нижнему регистру\\n\",\n",
      "    \"print(crazyword2.lower())\\n\",\n",
      "    \"#Узнаем длину текста в словах\\n\",\n",
      "    \"words = crazyword2.split()\\n\",\n",
      "    \"print(len(words))\\n\",\n",
      "    \"#Узнаем количество уникальных слов (чтобы узнать количество уникальных слов, преобразуем в множество и затем посчитаем кол-во)\\n\",\n",
      "    \"words = \\\"несчастная кошка порезала лапу сидит и ни шагу не может ступить скорей чтобы вылечить кошкину лапу воздушные шарики надо купить и сразу столпился народ на дороге шумит и кричит и на кошку глядит а кошка отчасти идет по дороге отчасти по воздуху плавно летит\\\"\\n\",\n",
      "    \"words2 = set(words.split()) \\n\",\n",
      "    \"print (len(words2))\\n\",\n",
      "    \"#Печатаем последние 10 слов\\n\",\n",
      "    \"print(words[34:])\\n\",\n",
      "    \"#Соединяем полученный в пункте 3 список в строку через знак переноса строки. \\n\",\n",
      "    \"crazystr = '\\\\n'.join(crazywords)\\n\",\n",
      "    \"#Распечатываем с 20 по 30 символ этой строки (включительно).\\n\",\n",
      "    \"print (crazystr[19:31])\\n\",\n",
      "    \"#Разбиваем список на биграммы\\n\",\n",
      "    \"word = crazystr.split ()\\n\",\n",
      "    \"crazybigrams = []\\n\",\n",
      "    \"for i in range (len(word)-1):\\n\",\n",
      "    \"    crazybigrams.append ([word[i], word [i+1]])\\n\",\n",
      "    \"#Превращаем список в кортеж\\n\",\n",
      "    \"crazybigrams = tuple(crazybigrams)\\n\",\n",
      "    \"print (crazybigrams)\\n\",\n",
      "    \"#Считаем частотность каждой биграммы\\n\",\n",
      "    \"print(len(crazybigrams))\\n\"\n",
      "   ]\n",
      "  },\n",
      "  {\n",
      "   \"cell_type\": \"markdown\",\n",
      "   \"metadata\": {},\n",
      "   \"source\": [\n",
      "    \"Задание 2\\n\",\n",
      "    \"1.Распечатать текущую директорию и список всех файлов и папок в ней. Посчитать и распечатать количество файлов.\\n\",\n",
      "    \"2.Пройтись циклом по рабочей директории, читая содержимое каждого файла и записывая его в новый файл poems.txt По завершении цикла должен получиться файл со всеми стихотворениями!\"\n",
      "   ]\n",
      "  },\n",
      "  {\n",
      "   \"cell_type\": \"code\",\n",
      "   \"execution_count\": 32,\n",
      "   \"metadata\": {},\n",
      "   \"outputs\": [\n",
      "    {\n",
      "     \"name\": \"stdout\",\n",
      "     \"output_type\": \"stream\",\n",
      "     \"text\": [\n",
      "      \"C:\\\\Users\\\\Asus_PC\\\\python-dh-hw\\n\",\n",
      "      \".git\\n\",\n",
      "      \".ipynb_checkpoints\\n\",\n",
      "      \"hello.docx\\n\",\n",
      "      \"HW2.ipynb\\n\",\n",
      "      \"poems\\n\",\n",
      "      \"poems.txt\\n\",\n",
      "      \"README.md\\n\",\n",
      "      \"9\\n\",\n",
      "      \"['боль.txt', 'ворон.txt', 'деды.txt', 'кладь.txt', 'ночь.txt', 'шредингер.txt']\\n\",\n",
      "      \"['кот.txt', 'лео.txt', 'пушок.txt']\\n\",\n",
      "      \"['гримм.txt', 'королевич.txt', 'король.txt', 'крестная.txt', 'яга.txt']\\n\"\n",
      "     ]\n",
      "    }\n",
      "   ],\n",
      "   \"source\": [\n",
      "    \"#Импортируем модуль\\n\",\n",
      "    \"import os\\n\",\n",
      "    \"#Смотрим, в какой директории мы находимся\\n\",\n",
      "    \"print(os.getcwd())\\n\",\n",
      "    \"#Распечатываем список всех файлов и папок в ней.\\n\",\n",
      "    \"for file in os.listdir('.'):\\n\",\n",
      "    \"    print(file)\\n\",\n",
      "    \"#Считаем количество файлов\\n\",\n",
      "    \"print(len(file))\\n\",\n",
      "    \"#Создаем цикл\\n\",\n",
      "    \"for root, dirs, files in os.walk('C:\\\\\\\\Users\\\\\\\\Asus_PC\\\\\\\\python-dh-hw\\\\\\\\poems'):\\n\",\n",
      "    \"    print(files)\\n\",\n",
      "    \"with open('poems.txt','w',encoding='utf-8') as f:\\n\",\n",
      "    \"    for root, dirs, files in os.walk('.'):\\n\",\n",
      "    \"        for file in files:\\n\",\n",
      "    \"            if os.path.exists(file):\\n\",\n",
      "    \"                with open(file,'r',encoding='utf-8') as name:\\n\",\n",
      "    \"                    name=name.read()\\n\",\n",
      "    \"                    f.write(name+ '\\\\n')\\n\",\n",
      "    \"            elif os.path.exists('.\\\\кот\\\\%s' %file):\\n\",\n",
      "    \"                with open('.\\\\кот\\\\%s' %file,'r',encoding='utf-8') as name:\\n\",\n",
      "    \"                    name=name.read()\\n\",\n",
      "    \"                    f.write(name+ '\\\\n')\\n\",\n",
      "    \"            elif os.path.exists('.\\\\сказки\\\\%s' %file):\\n\",\n",
      "    \"                with open('.\\\\сказки\\\\%s' %file,'r',encoding='utf-8') as name:\\n\",\n",
      "    \"                    name=name.read()\\n\",\n",
      "    \"                    f.write(name+ '\\\\n')\\n\",\n",
      "    \"with open ('poems.txt','r',encoding='utf-8') as q:\\n\",\n",
      "    \"    print (q.read())\"\n",
      "   ]\n",
      "  }\n",
      " ],\n",
      " \"metadata\": {\n",
      "  \"kernelspec\": {\n",
      "   \"display_name\": \"Python 3\",\n",
      "   \"language\": \"python\",\n",
      "   \"name\": \"python3\"\n",
      "  },\n",
      "  \"language_info\": {\n",
      "   \"codemirror_mode\": {\n",
      "    \"name\": \"ipython\",\n",
      "    \"version\": 3\n",
      "   },\n",
      "   \"file_extension\": \".py\",\n",
      "   \"mimetype\": \"text/x-python\",\n",
      "   \"name\": \"python\",\n",
      "   \"nbconvert_exporter\": \"python\",\n",
      "   \"pygments_lexer\": \"ipython3\",\n",
      "   \"version\": \"3.7.1\"\n",
      "  }\n",
      " },\n",
      " \"nbformat\": 4,\n",
      " \"nbformat_minor\": 2\n",
      "}\n",
      "\n",
      "\n",
      "{\n",
      " \"cells\": [\n",
      "  {\n",
      "   \"cell_type\": \"markdown\",\n",
      "   \"metadata\": {},\n",
      "   \"source\": [\n",
      "    \"Задание 1.\\n\",\n",
      "    \"Необходимо выделить все биграммы в этом тексте и сохранить их список в какую-либо переменную. Биграммы -- это пары стоящих рядом слов, например, \\\"варкалось хливкие\\\", \\\"хливкие шорьки\\\" и т.д.\\n\",\n",
      "    \"\\n\",\n",
      "    \"Подсказка №1: текст нужно разбить на слова с помощью функции split(), а потом использовать цикл for для создания списка биграмм. На каждой итерации цикла нужно печатать биграмму, а потом добавлять ее в список.\\n\",\n",
      "    \"\\n\",\n",
      "    \"Подсказка №2: количество биграмм в тексте = количество слов в тексте - 1.\"\n",
      "   ]\n",
      "  },\n",
      "  {\n",
      "   \"cell_type\": \"code\",\n",
      "   \"execution_count\": 1,\n",
      "   \"metadata\": {},\n",
      "   \"outputs\": [\n",
      "    {\n",
      "     \"name\": \"stdout\",\n",
      "     \"output_type\": \"stream\",\n",
      "     \"text\": [\n",
      "      \"['варкалось', 'хливкие', 'шорьки', 'пырялись', 'по', 'наве', 'и', 'хрюкотали', 'зелюки', 'как', 'мюмзики', 'в', 'мове', 'о', 'бойся', 'бармаглота', 'сын', 'он', 'так', 'свирлеп', 'и', 'дик', 'а', 'в', 'глуще', 'рымит', 'исполин', 'злопастный', 'брандашмыг']\\n\",\n",
      "      \"[['варкалось', 'хливкие'], ['хливкие', 'шорьки'], ['шорьки', 'пырялись'], ['пырялись', 'по'], ['по', 'наве'], ['наве', 'и'], ['и', 'хрюкотали'], ['хрюкотали', 'зелюки'], ['зелюки', 'как'], ['как', 'мюмзики'], ['мюмзики', 'в'], ['в', 'мове'], ['мове', 'о'], ['о', 'бойся'], ['бойся', 'бармаглота'], ['бармаглота', 'сын'], ['сын', 'он'], ['он', 'так'], ['так', 'свирлеп'], ['свирлеп', 'и'], ['и', 'дик'], ['дик', 'а'], ['а', 'в'], ['в', 'глуще'], ['глуще', 'рымит'], ['рымит', 'исполин'], ['исполин', 'злопастный'], ['злопастный', 'брандашмыг']]\\n\"\n",
      "     ]\n",
      "    }\n",
      "   ],\n",
      "   \"source\": [\n",
      "    \"#создаем переменную\\n\",\n",
      "    \"spisok = \\\"варкалось хливкие шорьки пырялись по наве и хрюкотали зелюки как мюмзики в мове о бойся бармаглота сын он так свирлеп и дик а в глуще рымит исполин злопастный брандашмыг\\\"\\n\",\n",
      "    \"#разбиваем на слова\\n\",\n",
      "    \"word = spisok.split ()\\n\",\n",
      "    \"print (word)\\n\",\n",
      "    \"#создаем цикл for для создания списка биграмм\\n\",\n",
      "    \"bigramsspisok = []\\n\",\n",
      "    \"for i in range (len(word)-1):\\n\",\n",
      "    \"    bigramsspisok.append ([word[i], word [i+1]])\\n\",\n",
      "    \"    \\n\",\n",
      "    \"print (bigramsspisok)\\n\"\n",
      "   ]\n",
      "  },\n",
      "  {\n",
      "   \"cell_type\": \"markdown\",\n",
      "   \"metadata\": {},\n",
      "   \"source\": [\n",
      "    \"#Задание 3.\\n\",\n",
      "    \"1.Скопировать текст, сохранить его в переменную.\\n\",\n",
      "    \"2.Узнать длину текста в символах.\\n\",\n",
      "    \"3.Очистить текст от пунктуации, используя list compehensions. На выходе должен получиться список слов.\\n\",\n",
      "    \"4.Объединить слова из получившегося списка в строку через пробел.\\n\",\n",
      "    \"5.С помощью list comprehensions проверить, написано ли слово с большой буквы, и если да, то привести его к нижнему регистру. На выходе должен получиться список из всех слов стихотворения, написанных с маленькой буквы (не только те, которые изначально были с маленькой буквы, а все).\\n\",\n",
      "    \"6.Узнать длину текста в словах.\\n\",\n",
      "    \"7.Узнать количество уникальных слов.\\n\",\n",
      "    \"8.Распечатать последние 10 слов.\\n\",\n",
      "    \"9.Соединить полученный в пункте 3 список в строку. Слова в строке должны быть написаны через знак переноса строки.\\n\",\n",
      "    \"10.Распечатать с 20 по 30 символ этой строки (включительно).\\n\",\n",
      "    \"11.Разбить текст на биграммы, записать их в переменную и посчитать частотность каждой биграммы. Биграммы должны быть в виде списка кортежей.\\n\"\n",
      "   ]\n",
      "  },\n",
      "  {\n",
      "   \"cell_type\": \"code\",\n",
      "   \"execution_count\": 10,\n",
      "   \"metadata\": {},\n",
      "   \"outputs\": [\n",
      "    {\n",
      "     \"name\": \"stdout\",\n",
      "     \"output_type\": \"stream\",\n",
      "     \"text\": [\n",
      "      \"270\\n\",\n",
      "      \"['Несчастная', 'кошка', 'порезала', 'лапу', 'Сидит', 'и', 'ни', 'шагу', 'не', 'может', 'ступить', 'Скорей', 'чтобы', 'вылечить', 'кошкину', 'лапу', 'Воздушные', 'шарики', 'надо', 'купить', 'И', 'сразу', 'столпился', 'народ', 'на', 'дороге', 'Шумит', 'и', 'кричит', 'и', 'на', 'кошку', 'глядит', 'А', 'кошка', 'отчасти', 'идет', 'по', 'дороге', 'Отчасти', 'по', 'воздуху', 'плавно', 'летит']\\n\",\n",
      "      \"Несчастная кошка порезала лапу Сидит и ни шагу не может ступить Скорей чтобы вылечить кошкину лапу Воздушные шарики надо купить И сразу столпился народ на дороге Шумит и кричит и на кошку глядит А кошка отчасти идет по дороге Отчасти по воздуху плавно летит\\n\",\n",
      "      \"['Несчастная', 'Сидит', 'Скорей', 'Воздушные', 'И', 'Шумит', 'А', 'Отчасти']\\n\",\n",
      "      \"несчастная кошка порезала лапу сидит и ни шагу не может ступить скорей чтобы вылечить кошкину лапу воздушные шарики надо купить и сразу столпился народ на дороге шумит и кричит и на кошку глядит а кошка отчасти идет по дороге отчасти по воздуху плавно летит\\n\",\n",
      "      \"44\\n\",\n",
      "      \"35\\n\",\n",
      "      \"ит и ни шагу не может ступить скорей чтобы вылечить кошкину лапу воздушные шарики надо купить и сразу столпился народ на дороге шумит и кричит и на кошку глядит а кошка отчасти идет по дороге отчасти по воздуху плавно летит\\n\",\n",
      "      \"резала\\n\",\n",
      "      \"лапу\\n\",\n",
      "      \"\\n\",\n",
      "      \"(['Несчастная', 'кошка'], ['кошка', 'порезала'], ['порезала', 'лапу'], ['лапу', 'Сидит'], ['Сидит', 'и'], ['и', 'ни'], ['ни', 'шагу'], ['шагу', 'не'], ['не', 'может'], ['может', 'ступить'], ['ступить', 'Скорей'], ['Скорей', 'чтобы'], ['чтобы', 'вылечить'], ['вылечить', 'кошкину'], ['кошкину', 'лапу'], ['лапу', 'Воздушные'], ['Воздушные', 'шарики'], ['шарики', 'надо'], ['надо', 'купить'], ['купить', 'И'], ['И', 'сразу'], ['сразу', 'столпился'], ['столпился', 'народ'], ['народ', 'на'], ['на', 'дороге'], ['дороге', 'Шумит'], ['Шумит', 'и'], ['и', 'кричит'], ['кричит', 'и'], ['и', 'на'], ['на', 'кошку'], ['кошку', 'глядит'], ['глядит', 'А'], ['А', 'кошка'], ['кошка', 'отчасти'], ['отчасти', 'идет'], ['идет', 'по'], ['по', 'дороге'], ['дороге', 'Отчасти'], ['Отчасти', 'по'], ['по', 'воздуху'], ['воздуху', 'плавно'], ['плавно', 'летит'])\\n\",\n",
      "      \"43\\n\"\n",
      "     ]\n",
      "    }\n",
      "   ],\n",
      "   \"source\": [\n",
      "    \"#Создаем переменную\\n\",\n",
      "    \"crazycat = \\\"\\\"\\\"Несчастная кошка порезала лапу- \\n\",\n",
      "    \"Сидит, и ни шагу не может ступить.\\n\",\n",
      "    \"Скорей, чтобы вылечить кошкину лапу\\n\",\n",
      "    \"Воздушные шарики надо купить!\\n\",\n",
      "    \"\\n\",\n",
      "    \"И сразу столпился народ на дороге-\\n\",\n",
      "    \"Шумит, и кричит, и на кошку глядит.\\n\",\n",
      "    \"А кошка отчасти идет по дороге,\\n\",\n",
      "    \"Отчасти по воздуху плавно летит!\\\"\\\"\\\"\\n\",\n",
      "    \"#Узнаем количество символов\\n\",\n",
      "    \"print (len(crazycat))\\n\",\n",
      "    \"#Очищаем текст от пунктуации, используя list compehensions.\\n\",\n",
      "    \"crazywords = [word.strip(\\\".,!?-\\\") for word in crazycat.split()]    \\n\",\n",
      "    \"print (crazywords)\\n\",\n",
      "    \"#Объединяем слова в строку\\n\",\n",
      "    \"crazyword2 = ' '.join(crazywords)\\n\",\n",
      "    \"print(crazyword2)\\n\",\n",
      "    \"#проверяем, написаны ли словы с большой буквы\\n\",\n",
      "    \"print([w for w in crazyword2.split() if w.istitle()])\\n\",\n",
      "    \"#Приводим слова к нижнему регистру\\n\",\n",
      "    \"print(crazyword2.lower())\\n\",\n",
      "    \"#Узнаем длину текста в словах\\n\",\n",
      "    \"words = crazyword2.split()\\n\",\n",
      "    \"print(len(words))\\n\",\n",
      "    \"#Узнаем количество уникальных слов (чтобы узнать количество уникальных слов, преобразуем в множество и затем посчитаем кол-во)\\n\",\n",
      "    \"words = \\\"несчастная кошка порезала лапу сидит и ни шагу не может ступить скорей чтобы вылечить кошкину лапу воздушные шарики надо купить и сразу столпился народ на дороге шумит и кричит и на кошку глядит а кошка отчасти идет по дороге отчасти по воздуху плавно летит\\\"\\n\",\n",
      "    \"words2 = set(words.split()) \\n\",\n",
      "    \"print (len(words2))\\n\",\n",
      "    \"#Печатаем последние 10 слов\\n\",\n",
      "    \"print(words[34:])\\n\",\n",
      "    \"#Соединяем полученный в пункте 3 список в строку через знак переноса строки. \\n\",\n",
      "    \"crazystr = '\\\\n'.join(crazywords)\\n\",\n",
      "    \"#Распечатываем с 20 по 30 символ этой строки (включительно).\\n\",\n",
      "    \"print (crazystr[19:31])\\n\",\n",
      "    \"#Разбиваем список на биграммы\\n\",\n",
      "    \"word = crazystr.split ()\\n\",\n",
      "    \"crazybigrams = []\\n\",\n",
      "    \"for i in range (len(word)-1):\\n\",\n",
      "    \"    crazybigrams.append ([word[i], word [i+1]])\\n\",\n",
      "    \"#Превращаем список в кортеж\\n\",\n",
      "    \"crazybigrams = tuple(crazybigrams)\\n\",\n",
      "    \"print (crazybigrams)\\n\",\n",
      "    \"#Считаем частотность каждой биграммы\\n\",\n",
      "    \"print(len(crazybigrams))\\n\"\n",
      "   ]\n",
      "  },\n",
      "  {\n",
      "   \"cell_type\": \"markdown\",\n",
      "   \"metadata\": {},\n",
      "   \"source\": [\n",
      "    \"Задание 2\\n\",\n",
      "    \"1.Распечатать текущую директорию и список всех файлов и папок в ней. Посчитать и распечатать количество файлов.\\n\",\n",
      "    \"2.Пройтись циклом по рабочей директории, читая содержимое каждого файла и записывая его в новый файл poems.txt По завершении цикла должен получиться файл со всеми стихотворениями!\"\n",
      "   ]\n",
      "  },\n",
      "  {\n",
      "   \"cell_type\": \"code\",\n",
      "   \"execution_count\": 32,\n",
      "   \"metadata\": {},\n",
      "   \"outputs\": [\n",
      "    {\n",
      "     \"name\": \"stdout\",\n",
      "     \"output_type\": \"stream\",\n",
      "     \"text\": [\n",
      "      \"C:\\\\Users\\\\Asus_PC\\\\python-dh-hw\\n\",\n",
      "      \".git\\n\",\n",
      "      \".ipynb_checkpoints\\n\",\n",
      "      \"hello.docx\\n\",\n",
      "      \"HW2.ipynb\\n\",\n",
      "      \"poems\\n\",\n",
      "      \"poems.txt\\n\",\n",
      "      \"README.md\\n\",\n",
      "      \"9\\n\",\n",
      "      \"['боль.txt', 'ворон.txt', 'деды.txt', 'кладь.txt', 'ночь.txt', 'шредингер.txt']\\n\",\n",
      "      \"['кот.txt', 'лео.txt', 'пушок.txt']\\n\",\n",
      "      \"['гримм.txt', 'королевич.txt', 'король.txt', 'крестная.txt', 'яга.txt']\\n\"\n",
      "     ]\n",
      "    }\n",
      "   ],\n",
      "   \"source\": [\n",
      "    \"#Импортируем модуль\\n\",\n",
      "    \"import os\\n\",\n",
      "    \"#Смотрим, в какой директории мы находимся\\n\",\n",
      "    \"print(os.getcwd())\\n\",\n",
      "    \"#Распечатываем список всех файлов и папок в ней.\\n\",\n",
      "    \"for file in os.listdir('.'):\\n\",\n",
      "    \"    print(file)\\n\",\n",
      "    \"#Считаем количество файлов\\n\",\n",
      "    \"print(len(file))\\n\",\n",
      "    \"#Создаем цикл\\n\",\n",
      "    \"for root, dirs, files in os.walk('C:\\\\\\\\Users\\\\\\\\Asus_PC\\\\\\\\python-dh-hw\\\\\\\\poems'):\\n\",\n",
      "    \"    print(files)\\n\",\n",
      "    \"with open('poems.txt','w',encoding='utf-8') as f:\\n\",\n",
      "    \"    for root, dirs, files in os.walk('.'):\\n\",\n",
      "    \"        for file in files:\\n\",\n",
      "    \"            if os.path.exists(file):\\n\",\n",
      "    \"                with open(file,'r',encoding='utf-8') as name:\\n\",\n",
      "    \"                    name=name.read()\\n\",\n",
      "    \"                    f.write(name+ '\\\\n')\\n\",\n",
      "    \"            elif os.path.exists('.\\\\кот\\\\%s' %file):\\n\",\n",
      "    \"                with open('.\\\\кот\\\\%s' %file,'r',encoding='utf-8') as name:\\n\",\n",
      "    \"                    name=name.read()\\n\",\n",
      "    \"                    f.write(name+ '\\\\n')\\n\",\n",
      "    \"            elif os.path.exists('.\\\\сказки\\\\%s' %file):\\n\",\n",
      "    \"                with open('.\\\\сказки\\\\%s' %file,'r',encoding='utf-8') as name:\\n\",\n",
      "    \"                    name=name.read()\\n\",\n",
      "    \"                    f.write(name+ '\\\\n')\\n\",\n",
      "    \"with open ('poems.txt','r',encoding='utf-8') as q:\\n\",\n",
      "    \"    print (q.read())\"\n",
      "   ]\n",
      "  }\n",
      " ],\n",
      " \"metadata\": {\n",
      "  \"kernelspec\": {\n",
      "   \"display_name\": \"Python 3\",\n",
      "   \"language\": \"python\",\n",
      "   \"name\": \"python3\"\n",
      "  },\n",
      "  \"language_info\": {\n",
      "   \"codemirror_mode\": {\n",
      "    \"name\": \"ipython\",\n",
      "    \"version\": 3\n",
      "   },\n",
      "   \"file_extension\": \".py\",\n",
      "   \"mimetype\": \"text/x-python\",\n",
      "   \"name\": \"python\",\n",
      "   \"nbconvert_exporter\": \"python\",\n",
      "   \"pygments_lexer\": \"ipython3\",\n",
      "   \"version\": \"3.7.1\"\n",
      "  }\n",
      " },\n",
      " \"nbformat\": 4,\n",
      " \"nbformat_minor\": 2\n",
      "}\n",
      "\n",
      "\n",
      "# python-dh-hw\n",
      "\n"
     ]
    }
   ],
   "source": [
    "#Импортируем модуль\n",
    "import os\n",
    "#Смотрим, в какой директории мы находимся\n",
    "print(os.getcwd())\n",
    "#Распечатываем список всех файлов и папок в ней.\n",
    "for file in os.listdir('.'):\n",
    "    print(file)\n",
    "#Считаем количество файлов\n",
    "print(len(file))\n",
    "#Создаем цикл\n",
    "for root, dirs, files in os.walk('C:\\\\Users\\\\Asus_PC\\\\python-dh-hw\\\\poems'):\n",
    "    print(files)\n",
    "with open('poems.txt','w',encoding='utf-8') as f:\n",
    "    for root, dirs, files in os.walk('.'):\n",
    "        for file in files:\n",
    "            if os.path.exists(file):\n",
    "                with open(file,'r',encoding='utf-8') as name:\n",
    "                    name=name.read()\n",
    "                    f.write(name+ '\\n')\n",
    "            elif os.path.exists('.\\кот\\%s' %file):\n",
    "                with open('.\\кот\\%s' %file,'r',encoding='utf-8') as name:\n",
    "                    name=name.read()\n",
    "                    f.write(name+ '\\n')\n",
    "            elif os.path.exists('.\\ворон\\%s' %file):\n",
    "                with open('.\\ворон\\%s' %file,'r',encoding='utf-8') as name:\n",
    "                    name=name.read()\n",
    "                    f.write(name+ '\\n')\n",
    "with open ('poems.txt','r',encoding='utf-8') as q:\n",
    "    print (q.read())"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}


{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Задание 1.\n",
    "Необходимо выделить все биграммы в этом тексте и сохранить их список в какую-либо переменную. Биграммы -- это пары стоящих рядом слов, например, \"варкалось хливкие\", \"хливкие шорьки\" и т.д.\n",
    "\n",
    "Подсказка №1: текст нужно разбить на слова с помощью функции split(), а потом использовать цикл for для создания списка биграмм. На каждой итерации цикла нужно печатать биграмму, а потом добавлять ее в список.\n",
    "\n",
    "Подсказка №2: количество биграмм в тексте = количество слов в тексте - 1."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['варкалось', 'хливкие', 'шорьки', 'пырялись', 'по', 'наве', 'и', 'хрюкотали', 'зелюки', 'как', 'мюмзики', 'в', 'мове', 'о', 'бойся', 'бармаглота', 'сын', 'он', 'так', 'свирлеп', 'и', 'дик', 'а', 'в', 'глуще', 'рымит', 'исполин', 'злопастный', 'брандашмыг']\n",
      "[['варкалось', 'хливкие'], ['хливкие', 'шорьки'], ['шорьки', 'пырялись'], ['пырялись', 'по'], ['по', 'наве'], ['наве', 'и'], ['и', 'хрюкотали'], ['хрюкотали', 'зелюки'], ['зелюки', 'как'], ['как', 'мюмзики'], ['мюмзики', 'в'], ['в', 'мове'], ['мове', 'о'], ['о', 'бойся'], ['бойся', 'бармаглота'], ['бармаглота', 'сын'], ['сын', 'он'], ['он', 'так'], ['так', 'свирлеп'], ['свирлеп', 'и'], ['и', 'дик'], ['дик', 'а'], ['а', 'в'], ['в', 'глуще'], ['глуще', 'рымит'], ['рымит', 'исполин'], ['исполин', 'злопастный'], ['злопастный', 'брандашмыг']]\n"
     ]
    }
   ],
   "source": [
    "#создаем переменную\n",
    "spisok = \"варкалось хливкие шорьки пырялись по наве и хрюкотали зелюки как мюмзики в мове о бойся бармаглота сын он так свирлеп и дик а в глуще рымит исполин злопастный брандашмыг\"\n",
    "#разбиваем на слова\n",
    "word = spisok.split ()\n",
    "print (word)\n",
    "#создаем цикл for для создания списка биграмм\n",
    "bigramsspisok = []\n",
    "for i in range (len(word)-1):\n",
    "    bigramsspisok.append ([word[i], word [i+1]])\n",
    "    \n",
    "print (bigramsspisok)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#Задание 3.\n",
    "1.Скопировать текст, сохранить его в переменную.\n",
    "2.Узнать длину текста в символах.\n",
    "3.Очистить текст от пунктуации, используя list compehensions. На выходе должен получиться список слов.\n",
    "4.Объединить слова из получившегося списка в строку через пробел.\n",
    "5.С помощью list comprehensions проверить, написано ли слово с большой буквы, и если да, то привести его к нижнему регистру. На выходе должен получиться список из всех слов стихотворения, написанных с маленькой буквы (не только те, которые изначально были с маленькой буквы, а все).\n",
    "6.Узнать длину текста в словах.\n",
    "7.Узнать количество уникальных слов.\n",
    "8.Распечатать последние 10 слов.\n",
    "9.Соединить полученный в пункте 3 список в строку. Слова в строке должны быть написаны через знак переноса строки.\n",
    "10.Распечатать с 20 по 30 символ этой строки (включительно).\n",
    "11.Разбить текст на биграммы, записать их в переменную и посчитать частотность каждой биграммы. Биграммы должны быть в виде списка кортежей.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "270\n",
      "['Несчастная', 'кошка', 'порезала', 'лапу', 'Сидит', 'и', 'ни', 'шагу', 'не', 'может', 'ступить', 'Скорей', 'чтобы', 'вылечить', 'кошкину', 'лапу', 'Воздушные', 'шарики', 'надо', 'купить', 'И', 'сразу', 'столпился', 'народ', 'на', 'дороге', 'Шумит', 'и', 'кричит', 'и', 'на', 'кошку', 'глядит', 'А', 'кошка', 'отчасти', 'идет', 'по', 'дороге', 'Отчасти', 'по', 'воздуху', 'плавно', 'летит']\n",
      "Несчастная кошка порезала лапу Сидит и ни шагу не может ступить Скорей чтобы вылечить кошкину лапу Воздушные шарики надо купить И сразу столпился народ на дороге Шумит и кричит и на кошку глядит А кошка отчасти идет по дороге Отчасти по воздуху плавно летит\n",
      "['Несчастная', 'Сидит', 'Скорей', 'Воздушные', 'И', 'Шумит', 'А', 'Отчасти']\n",
      "несчастная кошка порезала лапу сидит и ни шагу не может ступить скорей чтобы вылечить кошкину лапу воздушные шарики надо купить и сразу столпился народ на дороге шумит и кричит и на кошку глядит а кошка отчасти идет по дороге отчасти по воздуху плавно летит\n",
      "44\n",
      "35\n",
      "ит и ни шагу не может ступить скорей чтобы вылечить кошкину лапу воздушные шарики надо купить и сразу столпился народ на дороге шумит и кричит и на кошку глядит а кошка отчасти идет по дороге отчасти по воздуху плавно летит\n",
      "резала\n",
      "лапу\n",
      "\n",
      "(['Несчастная', 'кошка'], ['кошка', 'порезала'], ['порезала', 'лапу'], ['лапу', 'Сидит'], ['Сидит', 'и'], ['и', 'ни'], ['ни', 'шагу'], ['шагу', 'не'], ['не', 'может'], ['может', 'ступить'], ['ступить', 'Скорей'], ['Скорей', 'чтобы'], ['чтобы', 'вылечить'], ['вылечить', 'кошкину'], ['кошкину', 'лапу'], ['лапу', 'Воздушные'], ['Воздушные', 'шарики'], ['шарики', 'надо'], ['надо', 'купить'], ['купить', 'И'], ['И', 'сразу'], ['сразу', 'столпился'], ['столпился', 'народ'], ['народ', 'на'], ['на', 'дороге'], ['дороге', 'Шумит'], ['Шумит', 'и'], ['и', 'кричит'], ['кричит', 'и'], ['и', 'на'], ['на', 'кошку'], ['кошку', 'глядит'], ['глядит', 'А'], ['А', 'кошка'], ['кошка', 'отчасти'], ['отчасти', 'идет'], ['идет', 'по'], ['по', 'дороге'], ['дороге', 'Отчасти'], ['Отчасти', 'по'], ['по', 'воздуху'], ['воздуху', 'плавно'], ['плавно', 'летит'])\n",
      "43\n"
     ]
    }
   ],
   "source": [
    "#Создаем переменную\n",
    "crazycat = \"\"\"Несчастная кошка порезала лапу- \n",
    "Сидит, и ни шагу не может ступить.\n",
    "Скорей, чтобы вылечить кошкину лапу\n",
    "Воздушные шарики надо купить!\n",
    "\n",
    "И сразу столпился народ на дороге-\n",
    "Шумит, и кричит, и на кошку глядит.\n",
    "А кошка отчасти идет по дороге,\n",
    "Отчасти по воздуху плавно летит!\"\"\"\n",
    "#Узнаем количество символов\n",
    "print (len(crazycat))\n",
    "#Очищаем текст от пунктуации, используя list compehensions.\n",
    "crazywords = [word.strip(\".,!?-\") for word in crazycat.split()]    \n",
    "print (crazywords)\n",
    "#Объединяем слова в строку\n",
    "crazyword2 = ' '.join(crazywords)\n",
    "print(crazyword2)\n",
    "#проверяем, написаны ли словы с большой буквы\n",
    "print([w for w in crazyword2.split() if w.istitle()])\n",
    "#Приводим слова к нижнему регистру\n",
    "print(crazyword2.lower())\n",
    "#Узнаем длину текста в словах\n",
    "words = crazyword2.split()\n",
    "print(len(words))\n",
    "#Узнаем количество уникальных слов (чтобы узнать количество уникальных слов, преобразуем в множество и затем посчитаем кол-во)\n",
    "words = \"несчастная кошка порезала лапу сидит и ни шагу не может ступить скорей чтобы вылечить кошкину лапу воздушные шарики надо купить и сразу столпился народ на дороге шумит и кричит и на кошку глядит а кошка отчасти идет по дороге отчасти по воздуху плавно летит\"\n",
    "words2 = set(words.split()) \n",
    "print (len(words2))\n",
    "#Печатаем последние 10 слов\n",
    "print(words[34:])\n",
    "#Соединяем полученный в пункте 3 список в строку через знак переноса строки. \n",
    "crazystr = '\\n'.join(crazywords)\n",
    "#Распечатываем с 20 по 30 символ этой строки (включительно).\n",
    "print (crazystr[19:31])\n",
    "#Разбиваем список на биграммы\n",
    "word = crazystr.split ()\n",
    "crazybigrams = []\n",
    "for i in range (len(word)-1):\n",
    "    crazybigrams.append ([word[i], word [i+1]])\n",
    "#Превращаем список в кортеж\n",
    "crazybigrams = tuple(crazybigrams)\n",
    "print (crazybigrams)\n",
    "#Считаем частотность каждой биграммы\n",
    "print(len(crazybigrams))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Задание 2\n",
    "1.Распечатать текущую директорию и список всех файлов и папок в ней. Посчитать и распечатать количество файлов.\n",
    "2.Пройтись циклом по рабочей директории, читая содержимое каждого файла и записывая его в новый файл poems.txt По завершении цикла должен получиться файл со всеми стихотворениями!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "C:\\Users\\Asus_PC\\python-dh-hw\n",
      ".git\n",
      ".ipynb_checkpoints\n",
      "hello.docx\n",
      "HW2.ipynb\n",
      "poems\n",
      "poems.txt\n",
      "README.md\n",
      "9\n",
      "['боль.txt', 'ворон.txt', 'деды.txt', 'кладь.txt', 'ночь.txt', 'шредингер.txt']\n",
      "['кот.txt', 'лео.txt', 'пушок.txt']\n",
      "['гримм.txt', 'королевич.txt', 'король.txt', 'крестная.txt', 'яга.txt']\n",
      "\n",
      "{\n",
      " \"cells\": [\n",
      "  {\n",
      "   \"cell_type\": \"markdown\",\n",
      "   \"metadata\": {},\n",
      "   \"source\": [\n",
      "    \"Задание 1.\\n\",\n",
      "    \"Необходимо выделить все биграммы в этом тексте и сохранить их список в какую-либо переменную. Биграммы -- это пары стоящих рядом слов, например, \\\"варкалось хливкие\\\", \\\"хливкие шорьки\\\" и т.д.\\n\",\n",
      "    \"\\n\",\n",
      "    \"Подсказка №1: текст нужно разбить на слова с помощью функции split(), а потом использовать цикл for для создания списка биграмм. На каждой итерации цикла нужно печатать биграмму, а потом добавлять ее в список.\\n\",\n",
      "    \"\\n\",\n",
      "    \"Подсказка №2: количество биграмм в тексте = количество слов в тексте - 1.\"\n",
      "   ]\n",
      "  },\n",
      "  {\n",
      "   \"cell_type\": \"code\",\n",
      "   \"execution_count\": 1,\n",
      "   \"metadata\": {},\n",
      "   \"outputs\": [\n",
      "    {\n",
      "     \"name\": \"stdout\",\n",
      "     \"output_type\": \"stream\",\n",
      "     \"text\": [\n",
      "      \"['варкалось', 'хливкие', 'шорьки', 'пырялись', 'по', 'наве', 'и', 'хрюкотали', 'зелюки', 'как', 'мюмзики', 'в', 'мове', 'о', 'бойся', 'бармаглота', 'сын', 'он', 'так', 'свирлеп', 'и', 'дик', 'а', 'в', 'глуще', 'рымит', 'исполин', 'злопастный', 'брандашмыг']\\n\",\n",
      "      \"[['варкалось', 'хливкие'], ['хливкие', 'шорьки'], ['шорьки', 'пырялись'], ['пырялись', 'по'], ['по', 'наве'], ['наве', 'и'], ['и', 'хрюкотали'], ['хрюкотали', 'зелюки'], ['зелюки', 'как'], ['как', 'мюмзики'], ['мюмзики', 'в'], ['в', 'мове'], ['мове', 'о'], ['о', 'бойся'], ['бойся', 'бармаглота'], ['бармаглота', 'сын'], ['сын', 'он'], ['он', 'так'], ['так', 'свирлеп'], ['свирлеп', 'и'], ['и', 'дик'], ['дик', 'а'], ['а', 'в'], ['в', 'глуще'], ['глуще', 'рымит'], ['рымит', 'исполин'], ['исполин', 'злопастный'], ['злопастный', 'брандашмыг']]\\n\"\n",
      "     ]\n",
      "    }\n",
      "   ],\n",
      "   \"source\": [\n",
      "    \"#создаем переменную\\n\",\n",
      "    \"spisok = \\\"варкалось хливкие шорьки пырялись по наве и хрюкотали зелюки как мюмзики в мове о бойся бармаглота сын он так свирлеп и дик а в глуще рымит исполин злопастный брандашмыг\\\"\\n\",\n",
      "    \"#разбиваем на слова\\n\",\n",
      "    \"word = spisok.split ()\\n\",\n",
      "    \"print (word)\\n\",\n",
      "    \"#создаем цикл for для создания списка биграмм\\n\",\n",
      "    \"bigramsspisok = []\\n\",\n",
      "    \"for i in range (len(word)-1):\\n\",\n",
      "    \"    bigramsspisok.append ([word[i], word [i+1]])\\n\",\n",
      "    \"    \\n\",\n",
      "    \"print (bigramsspisok)\\n\"\n",
      "   ]\n",
      "  },\n",
      "  {\n",
      "   \"cell_type\": \"markdown\",\n",
      "   \"metadata\": {},\n",
      "   \"source\": [\n",
      "    \"#Задание 3.\\n\",\n",
      "    \"1.Скопировать текст, сохранить его в переменную.\\n\",\n",
      "    \"2.Узнать длину текста в символах.\\n\",\n",
      "    \"3.Очистить текст от пунктуации, используя list compehensions. На выходе должен получиться список слов.\\n\",\n",
      "    \"4.Объединить слова из получившегося списка в строку через пробел.\\n\",\n",
      "    \"5.С помощью list comprehensions проверить, написано ли слово с большой буквы, и если да, то привести его к нижнему регистру. На выходе должен получиться список из всех слов стихотворения, написанных с маленькой буквы (не только те, которые изначально были с маленькой буквы, а все).\\n\",\n",
      "    \"6.Узнать длину текста в словах.\\n\",\n",
      "    \"7.Узнать количество уникальных слов.\\n\",\n",
      "    \"8.Распечатать последние 10 слов.\\n\",\n",
      "    \"9.Соединить полученный в пункте 3 список в строку. Слова в строке должны быть написаны через знак переноса строки.\\n\",\n",
      "    \"10.Распечатать с 20 по 30 символ этой строки (включительно).\\n\",\n",
      "    \"11.Разбить текст на биграммы, записать их в переменную и посчитать частотность каждой биграммы. Биграммы должны быть в виде списка кортежей.\\n\"\n",
      "   ]\n",
      "  },\n",
      "  {\n",
      "   \"cell_type\": \"code\",\n",
      "   \"execution_count\": 10,\n",
      "   \"metadata\": {},\n",
      "   \"outputs\": [\n",
      "    {\n",
      "     \"name\": \"stdout\",\n",
      "     \"output_type\": \"stream\",\n",
      "     \"text\": [\n",
      "      \"270\\n\",\n",
      "      \"['Несчастная', 'кошка', 'порезала', 'лапу', 'Сидит', 'и', 'ни', 'шагу', 'не', 'может', 'ступить', 'Скорей', 'чтобы', 'вылечить', 'кошкину', 'лапу', 'Воздушные', 'шарики', 'надо', 'купить', 'И', 'сразу', 'столпился', 'народ', 'на', 'дороге', 'Шумит', 'и', 'кричит', 'и', 'на', 'кошку', 'глядит', 'А', 'кошка', 'отчасти', 'идет', 'по', 'дороге', 'Отчасти', 'по', 'воздуху', 'плавно', 'летит']\\n\",\n",
      "      \"Несчастная кошка порезала лапу Сидит и ни шагу не может ступить Скорей чтобы вылечить кошкину лапу Воздушные шарики надо купить И сразу столпился народ на дороге Шумит и кричит и на кошку глядит А кошка отчасти идет по дороге Отчасти по воздуху плавно летит\\n\",\n",
      "      \"['Несчастная', 'Сидит', 'Скорей', 'Воздушные', 'И', 'Шумит', 'А', 'Отчасти']\\n\",\n",
      "      \"несчастная кошка порезала лапу сидит и ни шагу не может ступить скорей чтобы вылечить кошкину лапу воздушные шарики надо купить и сразу столпился народ на дороге шумит и кричит и на кошку глядит а кошка отчасти идет по дороге отчасти по воздуху плавно летит\\n\",\n",
      "      \"44\\n\",\n",
      "      \"35\\n\",\n",
      "      \"ит и ни шагу не может ступить скорей чтобы вылечить кошкину лапу воздушные шарики надо купить и сразу столпился народ на дороге шумит и кричит и на кошку глядит а кошка отчасти идет по дороге отчасти по воздуху плавно летит\\n\",\n",
      "      \"резала\\n\",\n",
      "      \"лапу\\n\",\n",
      "      \"\\n\",\n",
      "      \"(['Несчастная', 'кошка'], ['кошка', 'порезала'], ['порезала', 'лапу'], ['лапу', 'Сидит'], ['Сидит', 'и'], ['и', 'ни'], ['ни', 'шагу'], ['шагу', 'не'], ['не', 'может'], ['может', 'ступить'], ['ступить', 'Скорей'], ['Скорей', 'чтобы'], ['чтобы', 'вылечить'], ['вылечить', 'кошкину'], ['кошкину', 'лапу'], ['лапу', 'Воздушные'], ['Воздушные', 'шарики'], ['шарики', 'надо'], ['надо', 'купить'], ['купить', 'И'], ['И', 'сразу'], ['сразу', 'столпился'], ['столпился', 'народ'], ['народ', 'на'], ['на', 'дороге'], ['дороге', 'Шумит'], ['Шумит', 'и'], ['и', 'кричит'], ['кричит', 'и'], ['и', 'на'], ['на', 'кошку'], ['кошку', 'глядит'], ['глядит', 'А'], ['А', 'кошка'], ['кошка', 'отчасти'], ['отчасти', 'идет'], ['идет', 'по'], ['по', 'дороге'], ['дороге', 'Отчасти'], ['Отчасти', 'по'], ['по', 'воздуху'], ['воздуху', 'плавно'], ['плавно', 'летит'])\\n\",\n",
      "      \"43\\n\"\n",
      "     ]\n",
      "    }\n",
      "   ],\n",
      "   \"source\": [\n",
      "    \"#Создаем переменную\\n\",\n",
      "    \"crazycat = \\\"\\\"\\\"Несчастная кошка порезала лапу- \\n\",\n",
      "    \"Сидит, и ни шагу не может ступить.\\n\",\n",
      "    \"Скорей, чтобы вылечить кошкину лапу\\n\",\n",
      "    \"Воздушные шарики надо купить!\\n\",\n",
      "    \"\\n\",\n",
      "    \"И сразу столпился народ на дороге-\\n\",\n",
      "    \"Шумит, и кричит, и на кошку глядит.\\n\",\n",
      "    \"А кошка отчасти идет по дороге,\\n\",\n",
      "    \"Отчасти по воздуху плавно летит!\\\"\\\"\\\"\\n\",\n",
      "    \"#Узнаем количество символов\\n\",\n",
      "    \"print (len(crazycat))\\n\",\n",
      "    \"#Очищаем текст от пунктуации, используя list compehensions.\\n\",\n",
      "    \"crazywords = [word.strip(\\\".,!?-\\\") for word in crazycat.split()]    \\n\",\n",
      "    \"print (crazywords)\\n\",\n",
      "    \"#Объединяем слова в строку\\n\",\n",
      "    \"crazyword2 = ' '.join(crazywords)\\n\",\n",
      "    \"print(crazyword2)\\n\",\n",
      "    \"#проверяем, написаны ли словы с большой буквы\\n\",\n",
      "    \"print([w for w in crazyword2.split() if w.istitle()])\\n\",\n",
      "    \"#Приводим слова к нижнему регистру\\n\",\n",
      "    \"print(crazyword2.lower())\\n\",\n",
      "    \"#Узнаем длину текста в словах\\n\",\n",
      "    \"words = crazyword2.split()\\n\",\n",
      "    \"print(len(words))\\n\",\n",
      "    \"#Узнаем количество уникальных слов (чтобы узнать количество уникальных слов, преобразуем в множество и затем посчитаем кол-во)\\n\",\n",
      "    \"words = \\\"несчастная кошка порезала лапу сидит и ни шагу не может ступить скорей чтобы вылечить кошкину лапу воздушные шарики надо купить и сразу столпился народ на дороге шумит и кричит и на кошку глядит а кошка отчасти идет по дороге отчасти по воздуху плавно летит\\\"\\n\",\n",
      "    \"words2 = set(words.split()) \\n\",\n",
      "    \"print (len(words2))\\n\",\n",
      "    \"#Печатаем последние 10 слов\\n\",\n",
      "    \"print(words[34:])\\n\",\n",
      "    \"#Соединяем полученный в пункте 3 список в строку через знак переноса строки. \\n\",\n",
      "    \"crazystr = '\\\\n'.join(crazywords)\\n\",\n",
      "    \"#Распечатываем с 20 по 30 символ этой строки (включительно).\\n\",\n",
      "    \"print (crazystr[19:31])\\n\",\n",
      "    \"#Разбиваем список на биграммы\\n\",\n",
      "    \"word = crazystr.split ()\\n\",\n",
      "    \"crazybigrams = []\\n\",\n",
      "    \"for i in range (len(word)-1):\\n\",\n",
      "    \"    crazybigrams.append ([word[i], word [i+1]])\\n\",\n",
      "    \"#Превращаем список в кортеж\\n\",\n",
      "    \"crazybigrams = tuple(crazybigrams)\\n\",\n",
      "    \"print (crazybigrams)\\n\",\n",
      "    \"#Считаем частотность каждой биграммы\\n\",\n",
      "    \"print(len(crazybigrams))\\n\"\n",
      "   ]\n",
      "  },\n",
      "  {\n",
      "   \"cell_type\": \"markdown\",\n",
      "   \"metadata\": {},\n",
      "   \"source\": [\n",
      "    \"Задание 2\\n\",\n",
      "    \"1.Распечатать текущую директорию и список всех файлов и папок в ней. Посчитать и распечатать количество файлов.\\n\",\n",
      "    \"2.Пройтись циклом по рабочей директории, читая содержимое каждого файла и записывая его в новый файл poems.txt По завершении цикла должен получиться файл со всеми стихотворениями!\"\n",
      "   ]\n",
      "  },\n",
      "  {\n",
      "   \"cell_type\": \"code\",\n",
      "   \"execution_count\": 32,\n",
      "   \"metadata\": {},\n",
      "   \"outputs\": [\n",
      "    {\n",
      "     \"name\": \"stdout\",\n",
      "     \"output_type\": \"stream\",\n",
      "     \"text\": [\n",
      "      \"C:\\\\Users\\\\Asus_PC\\\\python-dh-hw\\n\",\n",
      "      \".git\\n\",\n",
      "      \".ipynb_checkpoints\\n\",\n",
      "      \"hello.docx\\n\",\n",
      "      \"HW2.ipynb\\n\",\n",
      "      \"poems\\n\",\n",
      "      \"poems.txt\\n\",\n",
      "      \"README.md\\n\",\n",
      "      \"9\\n\",\n",
      "      \"['боль.txt', 'ворон.txt', 'деды.txt', 'кладь.txt', 'ночь.txt', 'шредингер.txt']\\n\",\n",
      "      \"['кот.txt', 'лео.txt', 'пушок.txt']\\n\",\n",
      "      \"['гримм.txt', 'королевич.txt', 'король.txt', 'крестная.txt', 'яга.txt']\\n\"\n",
      "     ]\n",
      "    }\n",
      "   ],\n",
      "   \"source\": [\n",
      "    \"#Импортируем модуль\\n\",\n",
      "    \"import os\\n\",\n",
      "    \"#Смотрим, в какой директории мы находимся\\n\",\n",
      "    \"print(os.getcwd())\\n\",\n",
      "    \"#Распечатываем список всех файлов и папок в ней.\\n\",\n",
      "    \"for file in os.listdir('.'):\\n\",\n",
      "    \"    print(file)\\n\",\n",
      "    \"#Считаем количество файлов\\n\",\n",
      "    \"print(len(file))\\n\",\n",
      "    \"#Создаем цикл\\n\",\n",
      "    \"for root, dirs, files in os.walk('C:\\\\\\\\Users\\\\\\\\Asus_PC\\\\\\\\python-dh-hw\\\\\\\\poems'):\\n\",\n",
      "    \"    print(files)\\n\",\n",
      "    \"with open('poems.txt','w',encoding='utf-8') as f:\\n\",\n",
      "    \"    for root, dirs, files in os.walk('.'):\\n\",\n",
      "    \"        for file in files:\\n\",\n",
      "    \"            if os.path.exists(file):\\n\",\n",
      "    \"                with open(file,'r',encoding='utf-8') as name:\\n\",\n",
      "    \"                    name=name.read()\\n\",\n",
      "    \"                    f.write(name+ '\\\\n')\\n\",\n",
      "    \"            elif os.path.exists('.\\\\кот\\\\%s' %file):\\n\",\n",
      "    \"                with open('.\\\\кот\\\\%s' %file,'r',encoding='utf-8') as name:\\n\",\n",
      "    \"                    name=name.read()\\n\",\n",
      "    \"                    f.write(name+ '\\\\n')\\n\",\n",
      "    \"            elif os.path.exists('.\\\\сказки\\\\%s' %file):\\n\",\n",
      "    \"                with open('.\\\\сказки\\\\%s' %file,'r',encoding='utf-8') as name:\\n\",\n",
      "    \"                    name=name.read()\\n\",\n",
      "    \"                    f.write(name+ '\\\\n')\\n\",\n",
      "    \"with open ('poems.txt','r',encoding='utf-8') as q:\\n\",\n",
      "    \"    print (q.read())\"\n",
      "   ]\n",
      "  }\n",
      " ],\n",
      " \"metadata\": {\n",
      "  \"kernelspec\": {\n",
      "   \"display_name\": \"Python 3\",\n",
      "   \"language\": \"python\",\n",
      "   \"name\": \"python3\"\n",
      "  },\n",
      "  \"language_info\": {\n",
      "   \"codemirror_mode\": {\n",
      "    \"name\": \"ipython\",\n",
      "    \"version\": 3\n",
      "   },\n",
      "   \"file_extension\": \".py\",\n",
      "   \"mimetype\": \"text/x-python\",\n",
      "   \"name\": \"python\",\n",
      "   \"nbconvert_exporter\": \"python\",\n",
      "   \"pygments_lexer\": \"ipython3\",\n",
      "   \"version\": \"3.7.1\"\n",
      "  }\n",
      " },\n",
      " \"nbformat\": 4,\n",
      " \"nbformat_minor\": 2\n",
      "}\n",
      "\n",
      "\n",
      "{\n",
      " \"cells\": [\n",
      "  {\n",
      "   \"cell_type\": \"markdown\",\n",
      "   \"metadata\": {},\n",
      "   \"source\": [\n",
      "    \"Задание 1.\\n\",\n",
      "    \"Необходимо выделить все биграммы в этом тексте и сохранить их список в какую-либо переменную. Биграммы -- это пары стоящих рядом слов, например, \\\"варкалось хливкие\\\", \\\"хливкие шорьки\\\" и т.д.\\n\",\n",
      "    \"\\n\",\n",
      "    \"Подсказка №1: текст нужно разбить на слова с помощью функции split(), а потом использовать цикл for для создания списка биграмм. На каждой итерации цикла нужно печатать биграмму, а потом добавлять ее в список.\\n\",\n",
      "    \"\\n\",\n",
      "    \"Подсказка №2: количество биграмм в тексте = количество слов в тексте - 1.\"\n",
      "   ]\n",
      "  },\n",
      "  {\n",
      "   \"cell_type\": \"code\",\n",
      "   \"execution_count\": 1,\n",
      "   \"metadata\": {},\n",
      "   \"outputs\": [\n",
      "    {\n",
      "     \"name\": \"stdout\",\n",
      "     \"output_type\": \"stream\",\n",
      "     \"text\": [\n",
      "      \"['варкалось', 'хливкие', 'шорьки', 'пырялись', 'по', 'наве', 'и', 'хрюкотали', 'зелюки', 'как', 'мюмзики', 'в', 'мове', 'о', 'бойся', 'бармаглота', 'сын', 'он', 'так', 'свирлеп', 'и', 'дик', 'а', 'в', 'глуще', 'рымит', 'исполин', 'злопастный', 'брандашмыг']\\n\",\n",
      "      \"[['варкалось', 'хливкие'], ['хливкие', 'шорьки'], ['шорьки', 'пырялись'], ['пырялись', 'по'], ['по', 'наве'], ['наве', 'и'], ['и', 'хрюкотали'], ['хрюкотали', 'зелюки'], ['зелюки', 'как'], ['как', 'мюмзики'], ['мюмзики', 'в'], ['в', 'мове'], ['мове', 'о'], ['о', 'бойся'], ['бойся', 'бармаглота'], ['бармаглота', 'сын'], ['сын', 'он'], ['он', 'так'], ['так', 'свирлеп'], ['свирлеп', 'и'], ['и', 'дик'], ['дик', 'а'], ['а', 'в'], ['в', 'глуще'], ['глуще', 'рымит'], ['рымит', 'исполин'], ['исполин', 'злопастный'], ['злопастный', 'брандашмыг']]\\n\"\n",
      "     ]\n",
      "    }\n",
      "   ],\n",
      "   \"source\": [\n",
      "    \"#создаем переменную\\n\",\n",
      "    \"spisok = \\\"варкалось хливкие шорьки пырялись по наве и хрюкотали зелюки как мюмзики в мове о бойся бармаглота сын он так свирлеп и дик а в глуще рымит исполин злопастный брандашмыг\\\"\\n\",\n",
      "    \"#разбиваем на слова\\n\",\n",
      "    \"word = spisok.split ()\\n\",\n",
      "    \"print (word)\\n\",\n",
      "    \"#создаем цикл for для создания списка биграмм\\n\",\n",
      "    \"bigramsspisok = []\\n\",\n",
      "    \"for i in range (len(word)-1):\\n\",\n",
      "    \"    bigramsspisok.append ([word[i], word [i+1]])\\n\",\n",
      "    \"    \\n\",\n",
      "    \"print (bigramsspisok)\\n\"\n",
      "   ]\n",
      "  },\n",
      "  {\n",
      "   \"cell_type\": \"markdown\",\n",
      "   \"metadata\": {},\n",
      "   \"source\": [\n",
      "    \"#Задание 3.\\n\",\n",
      "    \"1.Скопировать текст, сохранить его в переменную.\\n\",\n",
      "    \"2.Узнать длину текста в символах.\\n\",\n",
      "    \"3.Очистить текст от пунктуации, используя list compehensions. На выходе должен получиться список слов.\\n\",\n",
      "    \"4.Объединить слова из получившегося списка в строку через пробел.\\n\",\n",
      "    \"5.С помощью list comprehensions проверить, написано ли слово с большой буквы, и если да, то привести его к нижнему регистру. На выходе должен получиться список из всех слов стихотворения, написанных с маленькой буквы (не только те, которые изначально были с маленькой буквы, а все).\\n\",\n",
      "    \"6.Узнать длину текста в словах.\\n\",\n",
      "    \"7.Узнать количество уникальных слов.\\n\",\n",
      "    \"8.Распечатать последние 10 слов.\\n\",\n",
      "    \"9.Соединить полученный в пункте 3 список в строку. Слова в строке должны быть написаны через знак переноса строки.\\n\",\n",
      "    \"10.Распечатать с 20 по 30 символ этой строки (включительно).\\n\",\n",
      "    \"11.Разбить текст на биграммы, записать их в переменную и посчитать частотность каждой биграммы. Биграммы должны быть в виде списка кортежей.\\n\"\n",
      "   ]\n",
      "  },\n",
      "  {\n",
      "   \"cell_type\": \"code\",\n",
      "   \"execution_count\": 10,\n",
      "   \"metadata\": {},\n",
      "   \"outputs\": [\n",
      "    {\n",
      "     \"name\": \"stdout\",\n",
      "     \"output_type\": \"stream\",\n",
      "     \"text\": [\n",
      "      \"270\\n\",\n",
      "      \"['Несчастная', 'кошка', 'порезала', 'лапу', 'Сидит', 'и', 'ни', 'шагу', 'не', 'может', 'ступить', 'Скорей', 'чтобы', 'вылечить', 'кошкину', 'лапу', 'Воздушные', 'шарики', 'надо', 'купить', 'И', 'сразу', 'столпился', 'народ', 'на', 'дороге', 'Шумит', 'и', 'кричит', 'и', 'на', 'кошку', 'глядит', 'А', 'кошка', 'отчасти', 'идет', 'по', 'дороге', 'Отчасти', 'по', 'воздуху', 'плавно', 'летит']\\n\",\n",
      "      \"Несчастная кошка порезала лапу Сидит и ни шагу не может ступить Скорей чтобы вылечить кошкину лапу Воздушные шарики надо купить И сразу столпился народ на дороге Шумит и кричит и на кошку глядит А кошка отчасти идет по дороге Отчасти по воздуху плавно летит\\n\",\n",
      "      \"['Несчастная', 'Сидит', 'Скорей', 'Воздушные', 'И', 'Шумит', 'А', 'Отчасти']\\n\",\n",
      "      \"несчастная кошка порезала лапу сидит и ни шагу не может ступить скорей чтобы вылечить кошкину лапу воздушные шарики надо купить и сразу столпился народ на дороге шумит и кричит и на кошку глядит а кошка отчасти идет по дороге отчасти по воздуху плавно летит\\n\",\n",
      "      \"44\\n\",\n",
      "      \"35\\n\",\n",
      "      \"ит и ни шагу не может ступить скорей чтобы вылечить кошкину лапу воздушные шарики надо купить и сразу столпился народ на дороге шумит и кричит и на кошку глядит а кошка отчасти идет по дороге отчасти по воздуху плавно летит\\n\",\n",
      "      \"резала\\n\",\n",
      "      \"лапу\\n\",\n",
      "      \"\\n\",\n",
      "      \"(['Несчастная', 'кошка'], ['кошка', 'порезала'], ['порезала', 'лапу'], ['лапу', 'Сидит'], ['Сидит', 'и'], ['и', 'ни'], ['ни', 'шагу'], ['шагу', 'не'], ['не', 'может'], ['может', 'ступить'], ['ступить', 'Скорей'], ['Скорей', 'чтобы'], ['чтобы', 'вылечить'], ['вылечить', 'кошкину'], ['кошкину', 'лапу'], ['лапу', 'Воздушные'], ['Воздушные', 'шарики'], ['шарики', 'надо'], ['надо', 'купить'], ['купить', 'И'], ['И', 'сразу'], ['сразу', 'столпился'], ['столпился', 'народ'], ['народ', 'на'], ['на', 'дороге'], ['дороге', 'Шумит'], ['Шумит', 'и'], ['и', 'кричит'], ['кричит', 'и'], ['и', 'на'], ['на', 'кошку'], ['кошку', 'глядит'], ['глядит', 'А'], ['А', 'кошка'], ['кошка', 'отчасти'], ['отчасти', 'идет'], ['идет', 'по'], ['по', 'дороге'], ['дороге', 'Отчасти'], ['Отчасти', 'по'], ['по', 'воздуху'], ['воздуху', 'плавно'], ['плавно', 'летит'])\\n\",\n",
      "      \"43\\n\"\n",
      "     ]\n",
      "    }\n",
      "   ],\n",
      "   \"source\": [\n",
      "    \"#Создаем переменную\\n\",\n",
      "    \"crazycat = \\\"\\\"\\\"Несчастная кошка порезала лапу- \\n\",\n",
      "    \"Сидит, и ни шагу не может ступить.\\n\",\n",
      "    \"Скорей, чтобы вылечить кошкину лапу\\n\",\n",
      "    \"Воздушные шарики надо купить!\\n\",\n",
      "    \"\\n\",\n",
      "    \"И сразу столпился народ на дороге-\\n\",\n",
      "    \"Шумит, и кричит, и на кошку глядит.\\n\",\n",
      "    \"А кошка отчасти идет по дороге,\\n\",\n",
      "    \"Отчасти по воздуху плавно летит!\\\"\\\"\\\"\\n\",\n",
      "    \"#Узнаем количество символов\\n\",\n",
      "    \"print (len(crazycat))\\n\",\n",
      "    \"#Очищаем текст от пунктуации, используя list compehensions.\\n\",\n",
      "    \"crazywords = [word.strip(\\\".,!?-\\\") for word in crazycat.split()]    \\n\",\n",
      "    \"print (crazywords)\\n\",\n",
      "    \"#Объединяем слова в строку\\n\",\n",
      "    \"crazyword2 = ' '.join(crazywords)\\n\",\n",
      "    \"print(crazyword2)\\n\",\n",
      "    \"#проверяем, написаны ли словы с большой буквы\\n\",\n",
      "    \"print([w for w in crazyword2.split() if w.istitle()])\\n\",\n",
      "    \"#Приводим слова к нижнему регистру\\n\",\n",
      "    \"print(crazyword2.lower())\\n\",\n",
      "    \"#Узнаем длину текста в словах\\n\",\n",
      "    \"words = crazyword2.split()\\n\",\n",
      "    \"print(len(words))\\n\",\n",
      "    \"#Узнаем количество уникальных слов (чтобы узнать количество уникальных слов, преобразуем в множество и затем посчитаем кол-во)\\n\",\n",
      "    \"words = \\\"несчастная кошка порезала лапу сидит и ни шагу не может ступить скорей чтобы вылечить кошкину лапу воздушные шарики надо купить и сразу столпился народ на дороге шумит и кричит и на кошку глядит а кошка отчасти идет по дороге отчасти по воздуху плавно летит\\\"\\n\",\n",
      "    \"words2 = set(words.split()) \\n\",\n",
      "    \"print (len(words2))\\n\",\n",
      "    \"#Печатаем последние 10 слов\\n\",\n",
      "    \"print(words[34:])\\n\",\n",
      "    \"#Соединяем полученный в пункте 3 список в строку через знак переноса строки. \\n\",\n",
      "    \"crazystr = '\\\\n'.join(crazywords)\\n\",\n",
      "    \"#Распечатываем с 20 по 30 символ этой строки (включительно).\\n\",\n",
      "    \"print (crazystr[19:31])\\n\",\n",
      "    \"#Разбиваем список на биграммы\\n\",\n",
      "    \"word = crazystr.split ()\\n\",\n",
      "    \"crazybigrams = []\\n\",\n",
      "    \"for i in range (len(word)-1):\\n\",\n",
      "    \"    crazybigrams.append ([word[i], word [i+1]])\\n\",\n",
      "    \"#Превращаем список в кортеж\\n\",\n",
      "    \"crazybigrams = tuple(crazybigrams)\\n\",\n",
      "    \"print (crazybigrams)\\n\",\n",
      "    \"#Считаем частотность каждой биграммы\\n\",\n",
      "    \"print(len(crazybigrams))\\n\"\n",
      "   ]\n",
      "  },\n",
      "  {\n",
      "   \"cell_type\": \"markdown\",\n",
      "   \"metadata\": {},\n",
      "   \"source\": [\n",
      "    \"Задание 2\\n\",\n",
      "    \"1.Распечатать текущую директорию и список всех файлов и папок в ней. Посчитать и распечатать количество файлов.\\n\",\n",
      "    \"2.Пройтись циклом по рабочей директории, читая содержимое каждого файла и записывая его в новый файл poems.txt По завершении цикла должен получиться файл со всеми стихотворениями!\"\n",
      "   ]\n",
      "  },\n",
      "  {\n",
      "   \"cell_type\": \"code\",\n",
      "   \"execution_count\": 32,\n",
      "   \"metadata\": {},\n",
      "   \"outputs\": [\n",
      "    {\n",
      "     \"name\": \"stdout\",\n",
      "     \"output_type\": \"stream\",\n",
      "     \"text\": [\n",
      "      \"C:\\\\Users\\\\Asus_PC\\\\python-dh-hw\\n\",\n",
      "      \".git\\n\",\n",
      "      \".ipynb_checkpoints\\n\",\n",
      "      \"hello.docx\\n\",\n",
      "      \"HW2.ipynb\\n\",\n",
      "      \"poems\\n\",\n",
      "      \"poems.txt\\n\",\n",
      "      \"README.md\\n\",\n",
      "      \"9\\n\",\n",
      "      \"['боль.txt', 'ворон.txt', 'деды.txt', 'кладь.txt', 'ночь.txt', 'шредингер.txt']\\n\",\n",
      "      \"['кот.txt', 'лео.txt', 'пушок.txt']\\n\",\n",
      "      \"['гримм.txt', 'королевич.txt', 'король.txt', 'крестная.txt', 'яга.txt']\\n\"\n",
      "     ]\n",
      "    }\n",
      "   ],\n",
      "   \"source\": [\n",
      "    \"#Импортируем модуль\\n\",\n",
      "    \"import os\\n\",\n",
      "    \"#Смотрим, в какой директории мы находимся\\n\",\n",
      "    \"print(os.getcwd())\\n\",\n",
      "    \"#Распечатываем список всех файлов и папок в ней.\\n\",\n",
      "    \"for file in os.listdir('.'):\\n\",\n",
      "    \"    print(file)\\n\",\n",
      "    \"#Считаем количество файлов\\n\",\n",
      "    \"print(len(file))\\n\",\n",
      "    \"#Создаем цикл\\n\",\n",
      "    \"for root, dirs, files in os.walk('C:\\\\\\\\Users\\\\\\\\Asus_PC\\\\\\\\python-dh-hw\\\\\\\\poems'):\\n\",\n",
      "    \"    print(files)\\n\",\n",
      "    \"with open('poems.txt','w',encoding='utf-8') as f:\\n\",\n",
      "    \"    for root, dirs, files in os.walk('.'):\\n\",\n",
      "    \"        for file in files:\\n\",\n",
      "    \"            if os.path.exists(file):\\n\",\n",
      "    \"                with open(file,'r',encoding='utf-8') as name:\\n\",\n",
      "    \"                    name=name.read()\\n\",\n",
      "    \"                    f.write(name+ '\\\\n')\\n\",\n",
      "    \"            elif os.path.exists('.\\\\кот\\\\%s' %file):\\n\",\n",
      "    \"                with open('.\\\\кот\\\\%s' %file,'r',encoding='utf-8') as name:\\n\",\n",
      "    \"                    name=name.read()\\n\",\n",
      "    \"                    f.write(name+ '\\\\n')\\n\",\n",
      "    \"            elif os.path.exists('.\\\\сказки\\\\%s' %file):\\n\",\n",
      "    \"                with open('.\\\\сказки\\\\%s' %file,'r',encoding='utf-8') as name:\\n\",\n",
      "    \"                    name=name.read()\\n\",\n",
      "    \"                    f.write(name+ '\\\\n')\\n\",\n",
      "    \"with open ('poems.txt','r',encoding='utf-8') as q:\\n\",\n",
      "    \"    print (q.read())\"\n",
      "   ]\n",
      "  }\n",
      " ],\n",
      " \"metadata\": {\n",
      "  \"kernelspec\": {\n",
      "   \"display_name\": \"Python 3\",\n",
      "   \"language\": \"python\",\n",
      "   \"name\": \"python3\"\n",
      "  },\n",
      "  \"language_info\": {\n",
      "   \"codemirror_mode\": {\n",
      "    \"name\": \"ipython\",\n",
      "    \"version\": 3\n",
      "   },\n",
      "   \"file_extension\": \".py\",\n",
      "   \"mimetype\": \"text/x-python\",\n",
      "   \"name\": \"python\",\n",
      "   \"nbconvert_exporter\": \"python\",\n",
      "   \"pygments_lexer\": \"ipython3\",\n",
      "   \"version\": \"3.7.1\"\n",
      "  }\n",
      " },\n",
      " \"nbformat\": 4,\n",
      " \"nbformat_minor\": 2\n",
      "}\n",
      "\n",
      "\n",
      "# python-dh-hw\n",
      "\n"
     ]
    }
   ],
   "source": [
    "#Импортируем модуль\n",
    "import os\n",
    "#Смотрим, в какой директории мы находимся\n",
    "print(os.getcwd())\n",
    "#Распечатываем список всех файлов и папок в ней.\n",
    "for file in os.listdir('.'):\n",
    "    print(file)\n",
    "#Считаем количество файлов\n",
    "print(len(file))\n",
    "#Создаем цикл\n",
    "for root, dirs, files in os.walk('C:\\\\Users\\\\Asus_PC\\\\python-dh-hw\\\\poems'):\n",
    "    print(files)\n",
    "with open('poems.txt','w',encoding='utf-8') as f:\n",
    "    for root, dirs, files in os.walk('.'):\n",
    "        for file in files:\n",
    "            if os.path.exists(file):\n",
    "                with open(file,'r',encoding='utf-8') as name:\n",
    "                    name=name.read()\n",
    "                    f.write(name+ '\\n')\n",
    "            elif os.path.exists('.\\кот\\%s' %file):\n",
    "                with open('.\\кот\\%s' %file,'r',encoding='utf-8') as name:\n",
    "                    name=name.read()\n",
    "                    f.write(name+ '\\n')\n",
    "            elif os.path.exists('.\\ворон\\%s' %file):\n",
    "                with open('.\\ворон\\%s' %file,'r',encoding='utf-8') as name:\n",
    "                    name=name.read()\n",
    "                    f.write(name+ '\\n')\n",
    "with open ('poems.txt','r',encoding='utf-8') as q:\n",
    "    print (q.read())"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}


# python-dh-hw
